generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Company {
  id          Int       @id @default(autoincrement())
  name        String
  address     String
  description String
  users       User[]
  wastes      Waste[]
  auctions    Auction[]
  offers      Offer[]
}

model Notification {
  id          Int              @id @default(autoincrement())
  type        NotificationType
  description String
  offer       Offer?           @relation(fields: [offerId], references: [id])
  offerId     Int?
  auction     Auction?         @relation(fields: [auctionId], references: [id])
  auctionId   Int?
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())
}

model User {
  id               Int              @id @default(autoincrement())
  company          Company?         @relation(fields: [companyId], references: [id])
  companyId        Int?
  firstName        String
  lastName         String
  email            String           @unique
  password         String
  role             Role             @default(companyManager)
  membershipStatus MembershipStatus @default(waiting)
}

enum MembershipStatus {
  waiting
  accepted
  rejected
}

enum Role {
  companyManager
  companyAdmin
  superAdmin
}

model Waste {
  id             Int           @id @default(autoincrement())
  companyOwner   Company       @relation(fields: [companyOwnerId], references: [id])
  companyOwnerId Int
  wasteType      WasteType     @relation(fields: [wasteTypeId], references: [id])
  wasteTypeId    Int
  category       WasteCategory
  description    String
  units          Decimal
  unitType       UnitType      @relation(fields: [unitTypeId], references: [id])
  unitTypeId     Int
  createdAt      DateTime      @default(now())
  Auction        Auction[]
}

model WasteType {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  Waste Waste[]
}

model UnitType {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  Waste Waste[]
}

enum WasteCategory {
  usable
  nonUsable
}

model Auction {
  id              Int            @id @default(autoincrement())
  companySeller   Company        @relation(fields: [companySellerId], references: [id])
  companySellerId Int
  waste           Waste          @relation(fields: [wasteId], references: [id])
  wasteId         Int
  initialPrice    Decimal
  conditions      String?
  contact         String
  units           Decimal
  pickupLatitude  Decimal
  pickupLongitude Decimal
  expiresAt       DateTime
  createdAt       DateTime       @default(now())
  status          AuctionStatus  @default(available)
  offers          Offer[]
  Purchase        Purchase[]
  notifications   Notification[]
}

model Purchase {
  id         Int      @id @default(autoincrement())
  auction    Auction  @relation(fields: [auctionId], references: [id])
  auctionId  Int
  offer      Offer    @relation(fields: [offerId], references: [id])
  offerId    Int      @unique
  finalPrice Decimal
  createdAt  DateTime @default(now())
}

model Offer {
  id             Int            @id @default(autoincrement())
  auction        Auction        @relation(fields: [auctionId], references: [id])
  auctionId      Int
  companyBuyer   Company        @relation(fields: [companyBuyerId], references: [id])
  companyBuyerId Int
  contact        String
  offerPrice     Decimal
  status         OfferStatus    @default(waiting)
  createdAt      DateTime       @default(now())
  purchase       Purchase?
  notifications  Notification[]
}

enum AuctionStatus {
  available
  closed
  expired
  sold
}

enum OfferStatus {
  waiting
  accepted
  rejected
}

enum NotificationType {
  offer_accepted
  offer_rejected
  auction_has_new_offer
}
